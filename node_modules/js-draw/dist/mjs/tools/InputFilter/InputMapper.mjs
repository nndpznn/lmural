var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InputMapper_listener;
/**
 * Accepts input events and emits input events.
 */
class InputMapper {
    constructor() {
        _InputMapper_listener.set(this, null);
    }
    // @internal
    setEmitListener(listener) {
        if (listener && typeof listener === 'object') {
            __classPrivateFieldSet(this, _InputMapper_listener, (event) => {
                return listener.onEvent(event) ?? false;
            }, "f");
        }
        else {
            __classPrivateFieldSet(this, _InputMapper_listener, listener, "f");
        }
    }
    emit(event) {
        return __classPrivateFieldGet(this, _InputMapper_listener, "f")?.call(this, event) ?? false;
    }
}
_InputMapper_listener = new WeakMap();
export default InputMapper;
